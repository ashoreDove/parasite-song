// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: song.proto

package go_micro_service_song

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Song service

func NewSongEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Song service

type SongService interface {
	//name匹配搜索歌曲(数据库或爬虫）create
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	//获取歌曲信息（爬虫或者数据库）
	GetSongInfo(ctx context.Context, in *SongIdRequest, opts ...client.CallOption) (*SongResponse, error)
	//根据id_list获取歌曲list
	GetSongList(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*SongListResponse, error)
}

type songService struct {
	c    client.Client
	name string
}

func NewSongService(name string, c client.Client) SongService {
	return &songService{
		c:    c,
		name: name,
	}
}

func (c *songService) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.name, "Song.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songService) GetSongInfo(ctx context.Context, in *SongIdRequest, opts ...client.CallOption) (*SongResponse, error) {
	req := c.c.NewRequest(c.name, "Song.GetSongInfo", in)
	out := new(SongResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songService) GetSongList(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*SongListResponse, error) {
	req := c.c.NewRequest(c.name, "Song.GetSongList", in)
	out := new(SongListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Song service

type SongHandler interface {
	//name匹配搜索歌曲(数据库或爬虫）create
	Search(context.Context, *SearchRequest, *SearchResponse) error
	//获取歌曲信息（爬虫或者数据库）
	GetSongInfo(context.Context, *SongIdRequest, *SongResponse) error
	//根据id_list获取歌曲list
	GetSongList(context.Context, *ListRequest, *SongListResponse) error
}

func RegisterSongHandler(s server.Server, hdlr SongHandler, opts ...server.HandlerOption) error {
	type song interface {
		Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error
		GetSongInfo(ctx context.Context, in *SongIdRequest, out *SongResponse) error
		GetSongList(ctx context.Context, in *ListRequest, out *SongListResponse) error
	}
	type Song struct {
		song
	}
	h := &songHandler{hdlr}
	return s.Handle(s.NewHandler(&Song{h}, opts...))
}

type songHandler struct {
	SongHandler
}

func (h *songHandler) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.SongHandler.Search(ctx, in, out)
}

func (h *songHandler) GetSongInfo(ctx context.Context, in *SongIdRequest, out *SongResponse) error {
	return h.SongHandler.GetSongInfo(ctx, in, out)
}

func (h *songHandler) GetSongList(ctx context.Context, in *ListRequest, out *SongListResponse) error {
	return h.SongHandler.GetSongList(ctx, in, out)
}
